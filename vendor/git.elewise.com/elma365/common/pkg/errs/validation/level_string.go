// Code generated by "enumer -type=Level -trimprefix=Level -json -transform=snake -output=level_string.go ."; DO NOT EDIT.

//
package validation

import (
	"encoding/json"
	"fmt"
)

const _LevelName = "criticalerrorwarning"

var _LevelIndex = [...]uint8{0, 8, 13, 20}

func (i Level) String() string {
	if i < 0 || i >= Level(len(_LevelIndex)-1) {
		return fmt.Sprintf("Level(%d)", i)
	}
	return _LevelName[_LevelIndex[i]:_LevelIndex[i+1]]
}

var _LevelValues = []Level{0, 1, 2}

var _LevelNameToValueMap = map[string]Level{
	_LevelName[0:8]:   0,
	_LevelName[8:13]:  1,
	_LevelName[13:20]: 2,
}

// LevelString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func LevelString(s string) (Level, error) {
	if val, ok := _LevelNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Level values", s)
}

// LevelValues returns all values of the enum
func LevelValues() []Level {
	return _LevelValues
}

// IsALevel returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Level) IsALevel() bool {
	for _, v := range _LevelValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for Level
func (i Level) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for Level
func (i *Level) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Level should be a string, got %s", data)
	}

	var err error
	*i, err = LevelString(s)
	return err
}
