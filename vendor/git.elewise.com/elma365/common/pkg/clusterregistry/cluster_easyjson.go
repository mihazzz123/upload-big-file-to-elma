// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package clusterregistry

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	time "time"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonEc0cdf38DecodeGitElewiseComElma365CommonPkgClusterregistry(in *jlexer.Lexer, out *SQLDatabasesConfig) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "main":
			if in.IsNull() {
				in.Skip()
				out.Main = nil
			} else {
				if out.Main == nil {
					out.Main = new(SQLDBConnectionConfig)
				}
				(*out.Main).UnmarshalEasyJSON(in)
			}
		case "replicas":
			if in.IsNull() {
				in.Skip()
				out.Replicas = nil
			} else {
				if out.Replicas == nil {
					out.Replicas = new(SQLDBConnectionConfig)
				}
				(*out.Replicas).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEc0cdf38EncodeGitElewiseComElma365CommonPkgClusterregistry(out *jwriter.Writer, in SQLDatabasesConfig) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"main\":"
		out.RawString(prefix[1:])
		if in.Main == nil {
			out.RawString("null")
		} else {
			(*in.Main).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"replicas\":"
		out.RawString(prefix)
		if in.Replicas == nil {
			out.RawString("null")
		} else {
			(*in.Replicas).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SQLDatabasesConfig) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonEc0cdf38EncodeGitElewiseComElma365CommonPkgClusterregistry(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SQLDatabasesConfig) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEc0cdf38EncodeGitElewiseComElma365CommonPkgClusterregistry(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SQLDatabasesConfig) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonEc0cdf38DecodeGitElewiseComElma365CommonPkgClusterregistry(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SQLDatabasesConfig) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonEc0cdf38DecodeGitElewiseComElma365CommonPkgClusterregistry(l, v)
}
func easyjsonEc0cdf38DecodeGitElewiseComElma365CommonPkgClusterregistry1(in *jlexer.Lexer, out *SQLDBConnectionConfig) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "connectionString":
			out.ConnectionString = string(in.String())
		case "minOpenConnections":
			out.MinOpenConnections = int32(in.Int32())
		case "maxOpenConnections":
			out.MaxOpenConnections = int32(in.Int32())
		case "connectionTimeout":
			out.ConnectionTimeout = time.Duration(in.Int64())
		case "maxConnectionLifetime":
			out.MaxConnectionLifetime = time.Duration(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEc0cdf38EncodeGitElewiseComElma365CommonPkgClusterregistry1(out *jwriter.Writer, in SQLDBConnectionConfig) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"connectionString\":"
		out.RawString(prefix[1:])
		out.String(string(in.ConnectionString))
	}
	{
		const prefix string = ",\"minOpenConnections\":"
		out.RawString(prefix)
		out.Int32(int32(in.MinOpenConnections))
	}
	{
		const prefix string = ",\"maxOpenConnections\":"
		out.RawString(prefix)
		out.Int32(int32(in.MaxOpenConnections))
	}
	{
		const prefix string = ",\"connectionTimeout\":"
		out.RawString(prefix)
		out.Int64(int64(in.ConnectionTimeout))
	}
	{
		const prefix string = ",\"maxConnectionLifetime\":"
		out.RawString(prefix)
		out.Int64(int64(in.MaxConnectionLifetime))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SQLDBConnectionConfig) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonEc0cdf38EncodeGitElewiseComElma365CommonPkgClusterregistry1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SQLDBConnectionConfig) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEc0cdf38EncodeGitElewiseComElma365CommonPkgClusterregistry1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SQLDBConnectionConfig) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonEc0cdf38DecodeGitElewiseComElma365CommonPkgClusterregistry1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SQLDBConnectionConfig) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonEc0cdf38DecodeGitElewiseComElma365CommonPkgClusterregistry1(l, v)
}
func easyjsonEc0cdf38DecodeGitElewiseComElma365CommonPkgClusterregistry2(in *jlexer.Lexer, out *ClusterConfig) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "__id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.ID).UnmarshalText(data))
			}
		case "__description":
			out.Name = string(in.String())
		case "sql_database":
			if in.IsNull() {
				in.Skip()
				out.SQLDatabase = nil
			} else {
				if out.SQLDatabase == nil {
					out.SQLDatabase = new(SQLDatabasesConfig)
				}
				(*out.SQLDatabase).UnmarshalEasyJSON(in)
			}
		case "__createdAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "__updatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEc0cdf38EncodeGitElewiseComElma365CommonPkgClusterregistry2(out *jwriter.Writer, in ClusterConfig) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"__id\":"
		out.RawString(prefix[1:])
		out.RawText((in.ID).MarshalText())
	}
	{
		const prefix string = ",\"__description\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"sql_database\":"
		out.RawString(prefix)
		if in.SQLDatabase == nil {
			out.RawString("null")
		} else {
			(*in.SQLDatabase).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"__createdAt\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"__updatedAt\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ClusterConfig) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonEc0cdf38EncodeGitElewiseComElma365CommonPkgClusterregistry2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ClusterConfig) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEc0cdf38EncodeGitElewiseComElma365CommonPkgClusterregistry2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ClusterConfig) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonEc0cdf38DecodeGitElewiseComElma365CommonPkgClusterregistry2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ClusterConfig) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonEc0cdf38DecodeGitElewiseComElma365CommonPkgClusterregistry2(l, v)
}
