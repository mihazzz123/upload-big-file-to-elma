// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package permissions

import (
	json "encoding/json"
	refitem "git.elewise.com/elma365/common/pkg/types/complextypes/refitem"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson6a222efaDecodeGitElewiseComElma365CommonPkgPermissions(in *jlexer.Lexer, out *Permissions) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "inheritParent":
			out.InheritParent = bool(in.Bool())
		case "values":
			if in.IsNull() {
				in.Skip()
				out.Values = nil
			} else {
				in.Delim('[')
				if out.Values == nil {
					if !in.IsDelim(']') {
						out.Values = make([]Permission, 0, 1)
					} else {
						out.Values = []Permission{}
					}
				} else {
					out.Values = (out.Values)[:0]
				}
				for !in.IsDelim(']') {
					var v1 Permission
					(v1).UnmarshalEasyJSON(in)
					out.Values = append(out.Values, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "timestamp":
			out.Timestamp = int64(in.Int64())
		case "refItem":
			if in.IsNull() {
				in.Skip()
				out.RefItem = nil
			} else {
				if out.RefItem == nil {
					out.RefItem = new(refitem.RefItem)
				}
				(*out.RefItem).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a222efaEncodeGitElewiseComElma365CommonPkgPermissions(out *jwriter.Writer, in Permissions) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"inheritParent\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.InheritParent))
	}
	{
		const prefix string = ",\"values\":"
		out.RawString(prefix)
		if in.Values == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Values {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"timestamp\":"
		out.RawString(prefix)
		out.Int64(int64(in.Timestamp))
	}
	if in.RefItem != nil {
		const prefix string = ",\"refItem\":"
		out.RawString(prefix)
		(*in.RefItem).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Permissions) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a222efaEncodeGitElewiseComElma365CommonPkgPermissions(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Permissions) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a222efaDecodeGitElewiseComElma365CommonPkgPermissions(l, v)
}
func easyjson6a222efaDecodeGitElewiseComElma365CommonPkgPermissions1(in *jlexer.Lexer, out *Permission) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "group":
			(out.Group).UnmarshalEasyJSON(in)
		case "orgunitField":
			if in.IsNull() {
				in.Skip()
				out.OrgunitField = nil
			} else {
				if out.OrgunitField == nil {
					out.OrgunitField = new(string)
				}
				*out.OrgunitField = string(in.String())
			}
		case "types":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Types).UnmarshalJSON(data))
			}
		case "inherited":
			out.Inherited = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a222efaEncodeGitElewiseComElma365CommonPkgPermissions1(out *jwriter.Writer, in Permission) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"group\":"
		out.RawString(prefix[1:])
		(in.Group).MarshalEasyJSON(out)
	}
	if in.OrgunitField != nil {
		const prefix string = ",\"orgunitField\":"
		out.RawString(prefix)
		out.String(string(*in.OrgunitField))
	}
	{
		const prefix string = ",\"types\":"
		out.RawString(prefix)
		out.Raw((in.Types).MarshalJSON())
	}
	{
		const prefix string = ",\"inherited\":"
		out.RawString(prefix)
		out.Bool(bool(in.Inherited))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Permission) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a222efaEncodeGitElewiseComElma365CommonPkgPermissions1(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Permission) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a222efaDecodeGitElewiseComElma365CommonPkgPermissions1(l, v)
}
func easyjson6a222efaDecodeGitElewiseComElma365CommonPkgPermissions2(in *jlexer.Lexer, out *Group) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.ID).UnmarshalText(data))
			}
		case "type":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Type).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a222efaEncodeGitElewiseComElma365CommonPkgPermissions2(out *jwriter.Writer, in Group) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.RawText((in.ID).MarshalText())
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.Raw((in.Type).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Group) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a222efaEncodeGitElewiseComElma365CommonPkgPermissions2(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Group) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a222efaDecodeGitElewiseComElma365CommonPkgPermissions2(l, v)
}
