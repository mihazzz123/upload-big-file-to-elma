// Code generated by "enumer -json -transform=snake -type=GroupType -trimprefix=GroupType -output=group_type_string.go group_type.go"; DO NOT EDIT.

//
package permissions

import (
	"encoding/json"
	"fmt"
)

const _GroupTypeName = "usergrouporgstructrole"

var _GroupTypeIndex = [...]uint8{0, 4, 9, 18, 22}

func (i GroupType) String() string {
	if i < 0 || i >= GroupType(len(_GroupTypeIndex)-1) {
		return fmt.Sprintf("GroupType(%d)", i)
	}
	return _GroupTypeName[_GroupTypeIndex[i]:_GroupTypeIndex[i+1]]
}

var _GroupTypeValues = []GroupType{0, 1, 2, 3}

var _GroupTypeNameToValueMap = map[string]GroupType{
	_GroupTypeName[0:4]:   0,
	_GroupTypeName[4:9]:   1,
	_GroupTypeName[9:18]:  2,
	_GroupTypeName[18:22]: 3,
}

// GroupTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func GroupTypeString(s string) (GroupType, error) {
	if val, ok := _GroupTypeNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to GroupType values", s)
}

// GroupTypeValues returns all values of the enum
func GroupTypeValues() []GroupType {
	return _GroupTypeValues
}

// IsAGroupType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i GroupType) IsAGroupType() bool {
	for _, v := range _GroupTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for GroupType
func (i GroupType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for GroupType
func (i *GroupType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("GroupType should be a string, got %s", data)
	}

	var err error
	*i, err = GroupTypeString(s)
	return err
}
