// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson368d6892DecodeGitElewiseComElma365CommonPkgSettingsModels(in *jlexer.Lexer, out *LanguageSettings) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "localeInfo":
			(out.LocaleInfo).UnmarshalEasyJSON(in)
		case "poFiles":
			if in.IsNull() {
				in.Skip()
				out.POfiles = nil
			} else {
				in.Delim('[')
				if out.POfiles == nil {
					if !in.IsDelim(']') {
						out.POfiles = make([]LanguageFile, 0, 2)
					} else {
						out.POfiles = []LanguageFile{}
					}
				} else {
					out.POfiles = (out.POfiles)[:0]
				}
				for !in.IsDelim(']') {
					var v1 LanguageFile
					(v1).UnmarshalEasyJSON(in)
					out.POfiles = append(out.POfiles, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson368d6892EncodeGitElewiseComElma365CommonPkgSettingsModels(out *jwriter.Writer, in LanguageSettings) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"localeInfo\":"
		out.RawString(prefix[1:])
		(in.LocaleInfo).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"poFiles\":"
		out.RawString(prefix)
		if in.POfiles == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.POfiles {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LanguageSettings) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson368d6892EncodeGitElewiseComElma365CommonPkgSettingsModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LanguageSettings) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson368d6892EncodeGitElewiseComElma365CommonPkgSettingsModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LanguageSettings) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson368d6892DecodeGitElewiseComElma365CommonPkgSettingsModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LanguageSettings) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson368d6892DecodeGitElewiseComElma365CommonPkgSettingsModels(l, v)
}
func easyjson368d6892DecodeGitElewiseComElma365CommonPkgSettingsModels1(in *jlexer.Lexer, out *LanguageFile) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "hash":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.Hash).UnmarshalText(data))
			}
		case "serviceName":
			out.ServiceName = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson368d6892EncodeGitElewiseComElma365CommonPkgSettingsModels1(out *jwriter.Writer, in LanguageFile) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"hash\":"
		out.RawString(prefix[1:])
		out.RawText((in.Hash).MarshalText())
	}
	{
		const prefix string = ",\"serviceName\":"
		out.RawString(prefix)
		out.String(string(in.ServiceName))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LanguageFile) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson368d6892EncodeGitElewiseComElma365CommonPkgSettingsModels1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LanguageFile) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson368d6892EncodeGitElewiseComElma365CommonPkgSettingsModels1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LanguageFile) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson368d6892DecodeGitElewiseComElma365CommonPkgSettingsModels1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LanguageFile) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson368d6892DecodeGitElewiseComElma365CommonPkgSettingsModels1(l, v)
}
