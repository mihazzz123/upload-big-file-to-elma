// Code generated by "enumer -json -sql -transform=snake -type=Alias -trimprefix=Alias -output=alias_string.go alias.go"; DO NOT EDIT.

//
package collection

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
)

const _AliasName = "maindir"

var _AliasIndex = [...]uint8{0, 4, 7}

func (i Alias) String() string {
	if i < 0 || i >= Alias(len(_AliasIndex)-1) {
		return fmt.Sprintf("Alias(%d)", i)
	}
	return _AliasName[_AliasIndex[i]:_AliasIndex[i+1]]
}

var _AliasValues = []Alias{0, 1}

var _AliasNameToValueMap = map[string]Alias{
	_AliasName[0:4]: 0,
	_AliasName[4:7]: 1,
}

// AliasString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func AliasString(s string) (Alias, error) {
	if val, ok := _AliasNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Alias values", s)
}

// AliasValues returns all values of the enum
func AliasValues() []Alias {
	return _AliasValues
}

// IsAAlias returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Alias) IsAAlias() bool {
	for _, v := range _AliasValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for Alias
func (i Alias) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for Alias
func (i *Alias) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Alias should be a string, got %s", data)
	}

	var err error
	*i, err = AliasString(s)
	return err
}

func (i Alias) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *Alias) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	str, ok := value.(string)
	if !ok {
		bytes, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("value is not a byte slice")
		}

		str = string(bytes[:])
	}

	val, err := AliasString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
