// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package collection

import (
	json "encoding/json"
	namespace "git.elewise.com/elma365/common/pkg/namespace"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	time "time"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson31a05f68DecodeGitElewiseComElma365CommonPkgCollection(in *jlexer.Lexer, out *Collection) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "__id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.ID).UnmarshalText(data))
			}
		case "alias":
			out.Alias = string(in.String())
		case "namespace":
			out.Namespace = namespace.Namespace(in.String())
		case "name":
			out.Name = string(in.String())
		case "code":
			out.Code = string(in.String())
		case "type":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Type).UnmarshalJSON(data))
			}
		case "fields":
			(out.Fields).UnmarshalEasyJSON(in)
		case "accessType":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.AccessType).UnmarshalJSON(data))
			}
		case "subordinate":
			out.Subordinate = bool(in.Bool())
		case "permissions":
			(out.Permissions).UnmarshalEasyJSON(in)
		case "indices":
			if in.IsNull() {
				in.Skip()
				out.Indices = nil
			} else {
				if out.Indices == nil {
					out.Indices = new(bool)
				}
				*out.Indices = bool(in.Bool())
			}
		case "__createdAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "__createdBy":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.CreatedBy).UnmarshalText(data))
			}
		case "__updatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		case "__updatedBy":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.UpdatedBy).UnmarshalText(data))
			}
		case "__deletedAt":
			if in.IsNull() {
				in.Skip()
				out.DeletedAt = nil
			} else {
				if out.DeletedAt == nil {
					out.DeletedAt = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.DeletedAt).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson31a05f68EncodeGitElewiseComElma365CommonPkgCollection(out *jwriter.Writer, in Collection) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"__id\":"
		out.RawString(prefix[1:])
		out.RawText((in.ID).MarshalText())
	}
	{
		const prefix string = ",\"alias\":"
		out.RawString(prefix)
		out.String(string(in.Alias))
	}
	{
		const prefix string = ",\"namespace\":"
		out.RawString(prefix)
		out.String(string(in.Namespace))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"code\":"
		out.RawString(prefix)
		out.String(string(in.Code))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.Raw((in.Type).MarshalJSON())
	}
	{
		const prefix string = ",\"fields\":"
		out.RawString(prefix)
		(in.Fields).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"accessType\":"
		out.RawString(prefix)
		out.Raw((in.AccessType).MarshalJSON())
	}
	{
		const prefix string = ",\"subordinate\":"
		out.RawString(prefix)
		out.Bool(bool(in.Subordinate))
	}
	{
		const prefix string = ",\"permissions\":"
		out.RawString(prefix)
		(in.Permissions).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"indices\":"
		out.RawString(prefix)
		if in.Indices == nil {
			out.RawString("null")
		} else {
			out.Bool(bool(*in.Indices))
		}
	}
	{
		const prefix string = ",\"__createdAt\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"__createdBy\":"
		out.RawString(prefix)
		out.RawText((in.CreatedBy).MarshalText())
	}
	{
		const prefix string = ",\"__updatedAt\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"__updatedBy\":"
		out.RawString(prefix)
		out.RawText((in.UpdatedBy).MarshalText())
	}
	{
		const prefix string = ",\"__deletedAt\":"
		out.RawString(prefix)
		if in.DeletedAt == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.DeletedAt).MarshalJSON())
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Collection) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson31a05f68EncodeGitElewiseComElma365CommonPkgCollection(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Collection) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson31a05f68EncodeGitElewiseComElma365CommonPkgCollection(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Collection) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson31a05f68DecodeGitElewiseComElma365CommonPkgCollection(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Collection) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson31a05f68DecodeGitElewiseComElma365CommonPkgCollection(l, v)
}
