// Code generated by "enumer -transform=snake -type=Solution -trimprefix=Solution -output=solution_string.go solution.go"; DO NOT EDIT.

//
package config

import (
	"fmt"
)

const _SolutionName = "saasonpremise"

var _SolutionIndex = [...]uint8{0, 4, 13}

func (i Solution) String() string {
	if i < 0 || i >= Solution(len(_SolutionIndex)-1) {
		return fmt.Sprintf("Solution(%d)", i)
	}
	return _SolutionName[_SolutionIndex[i]:_SolutionIndex[i+1]]
}

var _SolutionValues = []Solution{0, 1}

var _SolutionNameToValueMap = map[string]Solution{
	_SolutionName[0:4]:  0,
	_SolutionName[4:13]: 1,
}

// SolutionString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func SolutionString(s string) (Solution, error) {
	if val, ok := _SolutionNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Solution values", s)
}

// SolutionValues returns all values of the enum
func SolutionValues() []Solution {
	return _SolutionValues
}

// IsASolution returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Solution) IsASolution() bool {
	for _, v := range _SolutionValues {
		if i == v {
			return true
		}
	}
	return false
}
