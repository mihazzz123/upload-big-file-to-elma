// Code generated by localizer. DO NOT EDIT.

package enum

import (
	"bytes"
	"fmt"
	"git.elewise.com/elma365/common/pkg/i18n"
	"github.com/leonelquinteros/gotext"
	"github.com/pkg/errors"
)

func (entity EnumData) ExtractPO(poCtxt *i18n.EntityPOContext) ([]byte, error) {
	res := &bytes.Buffer{}

	// Контекст сущности
	entityCtxt := &i18n.EntityPOContext{
		Name:   "enum_data",
		Parent: poCtxt,
	}
	_ = entityCtxt

	{
		// Генерация перевода для поля "EnumItems"
		for _, value := range entity.EnumItems {
			{
				fieldCtxt := i18n.EntityPOContext{
					Name:   "enumItems",
					Parent: entityCtxt,
				}
				var v i18n.LocalizableEntity
				var ok bool
				v, ok = interface{}(value).(i18n.LocalizableEntity)
				if !ok {
					v, ok = interface{}(&value).(i18n.LocalizableEntity)
				}
				if ok {
					b, err := v.ExtractPO(&fieldCtxt)
					if err != nil {
						return res.Bytes(), errors.WithStack(err)
					}
					_, err = res.Write(b)
					if err != nil {
						return res.Bytes(), errors.WithStack(err)
					}
				}
			}
		}
	}
	return res.Bytes(), nil
}

func (entity *EnumData) ApplyTranslation(poCtxt *i18n.EntityPOContext, translator gotext.Translator) {
	// Контекст сущности
	entityCtxt := &i18n.EntityPOContext{
		Name:   "enum_data",
		Parent: poCtxt,
	}
	_ = entityCtxt

	{
		// Генерация перевода для поля "EnumItems"
		fieldCtxt := i18n.EntityPOContext{
			Name:   "enumItems",
			Parent: entityCtxt,
		}
		for i, value := range entity.EnumItems {
			{
				var v i18n.LocalizableEntity
				var ok bool
				v, ok = interface{}(value).(i18n.LocalizableEntity)
				if !ok {
					v, ok = interface{}(&value).(i18n.LocalizableEntity)
				}
				if ok {
					v.ApplyTranslation(&fieldCtxt, translator)
				}
			}
			entity.EnumItems[i] = value
		}
	}
}

func (entity EnumItem) ExtractPO(poCtxt *i18n.EntityPOContext) ([]byte, error) {
	res := &bytes.Buffer{}

	// Контекст сущности
	entityCtxt := &i18n.EntityPOContext{
		Name:   "enum_item",
		ID:     fmt.Sprintf("%s", entity.Code),
		Parent: poCtxt,
	}
	_ = entityCtxt

	{
		// Генерация перевода для поля "Name"
		fieldCtxt := i18n.EntityPOContext{
			Name:   "name",
			Parent: entityCtxt,
		}
		b, err := i18n.ExtractPO(entity.Name, &fieldCtxt)
		if err != nil {
			return res.Bytes(), errors.WithStack(err)
		}
		_, err = res.Write(b)
		if err != nil {
			return res.Bytes(), errors.WithStack(err)
		}
	}
	return res.Bytes(), nil
}

func (entity *EnumItem) ApplyTranslation(poCtxt *i18n.EntityPOContext, translator gotext.Translator) {
	// Контекст сущности
	entityCtxt := &i18n.EntityPOContext{
		Name:   "enum_item",
		ID:     fmt.Sprintf("%s", entity.Code),
		Parent: poCtxt,
	}
	_ = entityCtxt

	{
		if entity.Name != "" {
			// Применяем перевод к полю "Name"
			fieldCtxt := i18n.EntityPOContext{
				Name:   "name",
				Parent: entityCtxt,
			}
			s := translator.GetC(entity.Name, fieldCtxt.String())
			if s == "" || s == entity.Name {
				s = translator.Get(entity.Name)
			}
			if s != "" {
				entity.Name = s
			}
		}
	}
}
