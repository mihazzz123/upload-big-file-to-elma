// Code generated by localizer. DO NOT EDIT.

package types

import (
	"bytes"
	"fmt"
	"git.elewise.com/elma365/common/pkg/i18n"
	"github.com/leonelquinteros/gotext"
	"github.com/pkg/errors"
)

func (entity Field) ExtractPO(poCtxt *i18n.EntityPOContext) ([]byte, error) {
	res := &bytes.Buffer{}

	// Контекст сущности
	entityCtxt := &i18n.EntityPOContext{
		Name:   "field",
		ID:     fmt.Sprintf("%s", entity.Code),
		Parent: poCtxt,
	}
	_ = entityCtxt

	{
		// Генерация перевода для поля "View"
		fieldCtxt := i18n.EntityPOContext{
			Name:   "view",
			Parent: entityCtxt,
		}
		var v i18n.LocalizableEntity
		var ok bool
		v, ok = interface{}(entity.View).(i18n.LocalizableEntity)
		if !ok {
			v, ok = interface{}(&entity.View).(i18n.LocalizableEntity)
		}
		if ok {
			b, err := v.ExtractPO(&fieldCtxt)
			if err != nil {
				return res.Bytes(), errors.WithStack(err)
			}
			_, err = res.Write(b)
			if err != nil {
				return res.Bytes(), errors.WithStack(err)
			}
		}
	}
	return res.Bytes(), nil
}

func (entity *Field) ApplyTranslation(poCtxt *i18n.EntityPOContext, translator gotext.Translator) {
	// Контекст сущности
	entityCtxt := &i18n.EntityPOContext{
		Name:   "field",
		ID:     fmt.Sprintf("%s", entity.Code),
		Parent: poCtxt,
	}
	_ = entityCtxt

	{
		// Генерация перевода для поля "View"
		fieldCtxt := i18n.EntityPOContext{
			Name:   "view",
			Parent: entityCtxt,
		}
		var v i18n.LocalizableEntity
		var ok bool
		v, ok = interface{}(entity.View).(i18n.LocalizableEntity)
		if !ok {
			v, ok = interface{}(&entity.View).(i18n.LocalizableEntity)
		}
		if ok {
			v.ApplyTranslation(&fieldCtxt, translator)
		}
	}
}

func (entity FieldView) ExtractPO(poCtxt *i18n.EntityPOContext) ([]byte, error) {
	res := &bytes.Buffer{}

	// Контекст сущности
	entityCtxt := &i18n.EntityPOContext{
		Name:   "field_view",
		Parent: poCtxt,
	}
	_ = entityCtxt

	{
		// Генерация перевода для поля "Name"
		fieldCtxt := i18n.EntityPOContext{
			Name:   "name",
			Parent: entityCtxt,
		}
		b, err := i18n.ExtractPO(entity.Name, &fieldCtxt)
		if err != nil {
			return res.Bytes(), errors.WithStack(err)
		}
		_, err = res.Write(b)
		if err != nil {
			return res.Bytes(), errors.WithStack(err)
		}
	}

	{
		// Генерация перевода для поля "Tooltip"
		fieldCtxt := i18n.EntityPOContext{
			Name:   "tooltip",
			Parent: entityCtxt,
		}
		b, err := i18n.ExtractPO(entity.Tooltip, &fieldCtxt)
		if err != nil {
			return res.Bytes(), errors.WithStack(err)
		}
		_, err = res.Write(b)
		if err != nil {
			return res.Bytes(), errors.WithStack(err)
		}
	}
	return res.Bytes(), nil
}

func (entity *FieldView) ApplyTranslation(poCtxt *i18n.EntityPOContext, translator gotext.Translator) {
	// Контекст сущности
	entityCtxt := &i18n.EntityPOContext{
		Name:   "field_view",
		Parent: poCtxt,
	}
	_ = entityCtxt

	{
		if entity.Name != "" {
			// Применяем перевод к полю "Name"
			fieldCtxt := i18n.EntityPOContext{
				Name:   "name",
				Parent: entityCtxt,
			}
			s := translator.GetC(entity.Name, fieldCtxt.String())
			if s == "" || s == entity.Name {
				s = translator.Get(entity.Name)
			}
			if s != "" {
				entity.Name = s
			}
		}
	}

	{
		if entity.Tooltip != "" {
			// Применяем перевод к полю "Tooltip"
			fieldCtxt := i18n.EntityPOContext{
				Name:   "tooltip",
				Parent: entityCtxt,
			}
			s := translator.GetC(entity.Tooltip, fieldCtxt.String())
			if s == "" || s == entity.Tooltip {
				s = translator.Get(entity.Tooltip)
			}
			if s != "" {
				entity.Tooltip = s
			}
		}
	}
}
