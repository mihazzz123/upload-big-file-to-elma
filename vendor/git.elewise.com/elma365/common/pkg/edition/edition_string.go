// Code generated by "enumer -json -text -transform=snake -type=Edition -trimprefix=Edition -output=edition_string.go edition.go"; DO NOT EDIT.

//
package edition

import (
	"encoding/json"
	"fmt"
)

const _EditionName = "litestandardenterpriseportal"

var _EditionIndex = [...]uint8{0, 4, 12, 22, 28}

func (i Edition) String() string {
	if i < 0 || i >= Edition(len(_EditionIndex)-1) {
		return fmt.Sprintf("Edition(%d)", i)
	}
	return _EditionName[_EditionIndex[i]:_EditionIndex[i+1]]
}

var _EditionValues = []Edition{0, 1, 2, 3}

var _EditionNameToValueMap = map[string]Edition{
	_EditionName[0:4]:   0,
	_EditionName[4:12]:  1,
	_EditionName[12:22]: 2,
	_EditionName[22:28]: 3,
}

// EditionString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func EditionString(s string) (Edition, error) {
	if val, ok := _EditionNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Edition values", s)
}

// EditionValues returns all values of the enum
func EditionValues() []Edition {
	return _EditionValues
}

// IsAEdition returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Edition) IsAEdition() bool {
	for _, v := range _EditionValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for Edition
func (i Edition) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for Edition
func (i *Edition) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Edition should be a string, got %s", data)
	}

	var err error
	*i, err = EditionString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for Edition
func (i Edition) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for Edition
func (i *Edition) UnmarshalText(text []byte) error {
	var err error
	*i, err = EditionString(string(text))
	return err
}
